/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.streaming.personal.list.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.exportimport.kernel.lar.StagedModelType;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import com.streaming.personal.list.model.PersonalList;
import com.streaming.personal.list.model.PersonalListModel;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the PersonalList service. Represents a row in the &quot;PersonalList&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>PersonalListModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link PersonalListImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see PersonalListImpl
 * @generated
 */
@JSON(strict = true)
public class PersonalListModelImpl
	extends BaseModelImpl<PersonalList> implements PersonalListModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a personal list model instance should use the <code>PersonalList</code> interface instead.
	 */
	public static final String TABLE_NAME = "PersonalList";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"personalItemId", Types.BIGINT},
		{"groupId", Types.BIGINT}, {"companyId", Types.BIGINT},
		{"userId", Types.BIGINT}, {"userName", Types.VARCHAR},
		{"createDate", Types.TIMESTAMP}, {"modifiedDate", Types.TIMESTAMP},
		{"description", Types.VARCHAR}, {"fileShort", Types.VARCHAR},
		{"launch", Types.BOOLEAN}, {"instancePk", Types.BIGINT},
		{"title", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("personalItemId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("description", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("fileShort", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("launch", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("instancePk", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("title", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table PersonalList (uuid_ VARCHAR(75) null,personalItemId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,description VARCHAR(75) null,fileShort VARCHAR(75) null,launch BOOLEAN,instancePk LONG,title VARCHAR(75) null)";

	public static final String TABLE_SQL_DROP = "drop table PersonalList";

	public static final String ORDER_BY_JPQL =
		" ORDER BY personalList.title ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY PersonalList.title ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long COMPANYID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long GROUPID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long PERSONALITEMID_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long UUID_COLUMN_BITMASK = 8L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long TITLE_COLUMN_BITMASK = 16L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public PersonalListModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _personalItemId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setPersonalItemId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _personalItemId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return PersonalList.class;
	}

	@Override
	public String getModelClassName() {
		return PersonalList.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<PersonalList, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<PersonalList, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<PersonalList, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((PersonalList)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<PersonalList, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<PersonalList, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(PersonalList)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<PersonalList, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<PersonalList, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static final Map<String, Function<PersonalList, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<PersonalList, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<PersonalList, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<PersonalList, Object>>();
		Map<String, BiConsumer<PersonalList, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<PersonalList, ?>>();

		attributeGetterFunctions.put("uuid", PersonalList::getUuid);
		attributeSetterBiConsumers.put(
			"uuid", (BiConsumer<PersonalList, String>)PersonalList::setUuid);
		attributeGetterFunctions.put(
			"personalItemId", PersonalList::getPersonalItemId);
		attributeSetterBiConsumers.put(
			"personalItemId",
			(BiConsumer<PersonalList, Long>)PersonalList::setPersonalItemId);
		attributeGetterFunctions.put("groupId", PersonalList::getGroupId);
		attributeSetterBiConsumers.put(
			"groupId",
			(BiConsumer<PersonalList, Long>)PersonalList::setGroupId);
		attributeGetterFunctions.put("companyId", PersonalList::getCompanyId);
		attributeSetterBiConsumers.put(
			"companyId",
			(BiConsumer<PersonalList, Long>)PersonalList::setCompanyId);
		attributeGetterFunctions.put("userId", PersonalList::getUserId);
		attributeSetterBiConsumers.put(
			"userId", (BiConsumer<PersonalList, Long>)PersonalList::setUserId);
		attributeGetterFunctions.put("userName", PersonalList::getUserName);
		attributeSetterBiConsumers.put(
			"userName",
			(BiConsumer<PersonalList, String>)PersonalList::setUserName);
		attributeGetterFunctions.put("createDate", PersonalList::getCreateDate);
		attributeSetterBiConsumers.put(
			"createDate",
			(BiConsumer<PersonalList, Date>)PersonalList::setCreateDate);
		attributeGetterFunctions.put(
			"modifiedDate", PersonalList::getModifiedDate);
		attributeSetterBiConsumers.put(
			"modifiedDate",
			(BiConsumer<PersonalList, Date>)PersonalList::setModifiedDate);
		attributeGetterFunctions.put(
			"description", PersonalList::getDescription);
		attributeSetterBiConsumers.put(
			"description",
			(BiConsumer<PersonalList, String>)PersonalList::setDescription);
		attributeGetterFunctions.put("fileShort", PersonalList::getFileShort);
		attributeSetterBiConsumers.put(
			"fileShort",
			(BiConsumer<PersonalList, String>)PersonalList::setFileShort);
		attributeGetterFunctions.put("launch", PersonalList::getLaunch);
		attributeSetterBiConsumers.put(
			"launch",
			(BiConsumer<PersonalList, Boolean>)PersonalList::setLaunch);
		attributeGetterFunctions.put("instancePk", PersonalList::getInstancePk);
		attributeSetterBiConsumers.put(
			"instancePk",
			(BiConsumer<PersonalList, Long>)PersonalList::setInstancePk);
		attributeGetterFunctions.put("title", PersonalList::getTitle);
		attributeSetterBiConsumers.put(
			"title", (BiConsumer<PersonalList, String>)PersonalList::setTitle);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_uuid = uuid;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalUuid() {
		return getColumnOriginalValue("uuid_");
	}

	@JSON
	@Override
	public long getPersonalItemId() {
		return _personalItemId;
	}

	@Override
	public void setPersonalItemId(long personalItemId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_personalItemId = personalItemId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalPersonalItemId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("personalItemId"));
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalGroupId() {
		return GetterUtil.getLong(this.<Long>getColumnOriginalValue("groupId"));
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalCompanyId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("companyId"));
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getDescription() {
		if (_description == null) {
			return "";
		}
		else {
			return _description;
		}
	}

	@Override
	public void setDescription(String description) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_description = description;
	}

	@JSON
	@Override
	public String getFileShort() {
		if (_fileShort == null) {
			return "";
		}
		else {
			return _fileShort;
		}
	}

	@Override
	public void setFileShort(String fileShort) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_fileShort = fileShort;
	}

	@JSON
	@Override
	public boolean getLaunch() {
		return _launch;
	}

	@JSON
	@Override
	public boolean isLaunch() {
		return _launch;
	}

	@Override
	public void setLaunch(boolean launch) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_launch = launch;
	}

	@JSON
	@Override
	public long getInstancePk() {
		return _instancePk;
	}

	@Override
	public void setInstancePk(long instancePk) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_instancePk = instancePk;
	}

	@JSON
	@Override
	public String getTitle() {
		if (_title == null) {
			return "";
		}
		else {
			return _title;
		}
	}

	@Override
	public void setTitle(String title) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_title = title;
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(
			PortalUtil.getClassNameId(PersonalList.class.getName()));
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), PersonalList.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public PersonalList toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, PersonalList>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		PersonalListImpl personalListImpl = new PersonalListImpl();

		personalListImpl.setUuid(getUuid());
		personalListImpl.setPersonalItemId(getPersonalItemId());
		personalListImpl.setGroupId(getGroupId());
		personalListImpl.setCompanyId(getCompanyId());
		personalListImpl.setUserId(getUserId());
		personalListImpl.setUserName(getUserName());
		personalListImpl.setCreateDate(getCreateDate());
		personalListImpl.setModifiedDate(getModifiedDate());
		personalListImpl.setDescription(getDescription());
		personalListImpl.setFileShort(getFileShort());
		personalListImpl.setLaunch(isLaunch());
		personalListImpl.setInstancePk(getInstancePk());
		personalListImpl.setTitle(getTitle());

		personalListImpl.resetOriginalValues();

		return personalListImpl;
	}

	@Override
	public PersonalList cloneWithOriginalValues() {
		PersonalListImpl personalListImpl = new PersonalListImpl();

		personalListImpl.setUuid(this.<String>getColumnOriginalValue("uuid_"));
		personalListImpl.setPersonalItemId(
			this.<Long>getColumnOriginalValue("personalItemId"));
		personalListImpl.setGroupId(
			this.<Long>getColumnOriginalValue("groupId"));
		personalListImpl.setCompanyId(
			this.<Long>getColumnOriginalValue("companyId"));
		personalListImpl.setUserId(this.<Long>getColumnOriginalValue("userId"));
		personalListImpl.setUserName(
			this.<String>getColumnOriginalValue("userName"));
		personalListImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));
		personalListImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));
		personalListImpl.setDescription(
			this.<String>getColumnOriginalValue("description"));
		personalListImpl.setFileShort(
			this.<String>getColumnOriginalValue("fileShort"));
		personalListImpl.setLaunch(
			this.<Boolean>getColumnOriginalValue("launch"));
		personalListImpl.setInstancePk(
			this.<Long>getColumnOriginalValue("instancePk"));
		personalListImpl.setTitle(this.<String>getColumnOriginalValue("title"));

		return personalListImpl;
	}

	@Override
	public int compareTo(PersonalList personalList) {
		int value = 0;

		value = getTitle().compareTo(personalList.getTitle());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof PersonalList)) {
			return false;
		}

		PersonalList personalList = (PersonalList)object;

		long primaryKey = personalList.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<PersonalList> toCacheModel() {
		PersonalListCacheModel personalListCacheModel =
			new PersonalListCacheModel();

		personalListCacheModel.uuid = getUuid();

		String uuid = personalListCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			personalListCacheModel.uuid = null;
		}

		personalListCacheModel.personalItemId = getPersonalItemId();

		personalListCacheModel.groupId = getGroupId();

		personalListCacheModel.companyId = getCompanyId();

		personalListCacheModel.userId = getUserId();

		personalListCacheModel.userName = getUserName();

		String userName = personalListCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			personalListCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			personalListCacheModel.createDate = createDate.getTime();
		}
		else {
			personalListCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			personalListCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			personalListCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		personalListCacheModel.description = getDescription();

		String description = personalListCacheModel.description;

		if ((description != null) && (description.length() == 0)) {
			personalListCacheModel.description = null;
		}

		personalListCacheModel.fileShort = getFileShort();

		String fileShort = personalListCacheModel.fileShort;

		if ((fileShort != null) && (fileShort.length() == 0)) {
			personalListCacheModel.fileShort = null;
		}

		personalListCacheModel.launch = isLaunch();

		personalListCacheModel.instancePk = getInstancePk();

		personalListCacheModel.title = getTitle();

		String title = personalListCacheModel.title;

		if ((title != null) && (title.length() == 0)) {
			personalListCacheModel.title = null;
		}

		return personalListCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<PersonalList, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<PersonalList, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<PersonalList, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((PersonalList)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, PersonalList>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					PersonalList.class, ModelWrapper.class);

	}

	private String _uuid;
	private long _personalItemId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _description;
	private String _fileShort;
	private boolean _launch;
	private long _instancePk;
	private String _title;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<PersonalList, Object> function = _attributeGetterFunctions.get(
			columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((PersonalList)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("uuid_", _uuid);
		_columnOriginalValues.put("personalItemId", _personalItemId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put("description", _description);
		_columnOriginalValues.put("fileShort", _fileShort);
		_columnOriginalValues.put("launch", _launch);
		_columnOriginalValues.put("instancePk", _instancePk);
		_columnOriginalValues.put("title", _title);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("uuid_", "uuid");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("uuid_", 1L);

		columnBitmasks.put("personalItemId", 2L);

		columnBitmasks.put("groupId", 4L);

		columnBitmasks.put("companyId", 8L);

		columnBitmasks.put("userId", 16L);

		columnBitmasks.put("userName", 32L);

		columnBitmasks.put("createDate", 64L);

		columnBitmasks.put("modifiedDate", 128L);

		columnBitmasks.put("description", 256L);

		columnBitmasks.put("fileShort", 512L);

		columnBitmasks.put("launch", 1024L);

		columnBitmasks.put("instancePk", 2048L);

		columnBitmasks.put("title", 4096L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private PersonalList _escapedModel;

}
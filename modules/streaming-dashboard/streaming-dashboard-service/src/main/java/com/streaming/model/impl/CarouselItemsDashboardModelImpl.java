/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.streaming.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.exportimport.kernel.lar.StagedModelType;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the CarouselItemsDashboard service. Represents a row in the &quot;STG-CarouselItemsDashboard&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>CarouselItemsDashboardModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link CarouselItemsDashboardImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see CarouselItemsDashboardImpl
 * @generated
 */
@JSON(strict = true)
public abstract class CarouselItemsDashboardModelImpl
	extends BaseModelImpl<CarouselItemsDashboard>
	implements CarouselItemsDashboardModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a carousel items dashboard model instance should use the <code>CarouselItemsDashboard</code> interface instead.
	 */
	public static final String TABLE_NAME = "STG-CarouselItemsDashboard";

	public static final Object[][] TABLE_COLUMNS = {
		{"mvccVersion", Types.BIGINT}, {"uuid_", Types.VARCHAR},
		{"externalReferenceCode", Types.VARCHAR}, {"streamingId", Types.BIGINT},
		{"groupId", Types.BIGINT}, {"companyId", Types.BIGINT},
		{"userId", Types.BIGINT}, {"userName", Types.VARCHAR},
		{"createDate", Types.TIMESTAMP}, {"modifiedDate", Types.TIMESTAMP},
		{"category", Types.VARCHAR}, {"colorTheme", Types.VARCHAR},
		{"priority", Types.VARCHAR}, {"title", Types.VARCHAR},
		{"user", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("mvccVersion", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("externalReferenceCode", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("streamingId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("category", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("colorTheme", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("priority", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("title", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("user", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table STG-CarouselItemsDashboard (mvccVersion LONG default 0 not null,uuid_ VARCHAR(75) null,externalReferenceCode VARCHAR(75) null,streamingId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,category VARCHAR(75) null,colorTheme VARCHAR(75) null,priority VARCHAR(75) null,title VARCHAR(75) null,user VARCHAR(75) null)";

	public static final String TABLE_SQL_DROP =
		"drop table STG-CarouselItemsDashboard";

	public static final String ORDER_BY_JPQL =
		" ORDER BY carouselItemsDashboard.title ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY STG-CarouselItemsDashboard.title ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long COMPANYID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long EXTERNALREFERENCECODE_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long GROUPID_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long STREAMINGID_COLUMN_BITMASK = 8L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long UUID_COLUMN_BITMASK = 16L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long TITLE_COLUMN_BITMASK = 32L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public CarouselItemsDashboardModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _streamingId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setStreamingId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _streamingId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return CarouselItemsDashboard.class;
	}

	@Override
	public String getModelClassName() {
		return CarouselItemsDashboard.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<CarouselItemsDashboard, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<CarouselItemsDashboard, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<CarouselItemsDashboard, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((CarouselItemsDashboard)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<CarouselItemsDashboard, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<CarouselItemsDashboard, Object>
				attributeSetterBiConsumer = attributeSetterBiConsumers.get(
					attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(CarouselItemsDashboard)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<CarouselItemsDashboard, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<CarouselItemsDashboard, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static final Map<String, Function<CarouselItemsDashboard, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<CarouselItemsDashboard, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<CarouselItemsDashboard, Object>>
			attributeGetterFunctions =
				new LinkedHashMap
					<String, Function<CarouselItemsDashboard, Object>>();
		Map<String, BiConsumer<CarouselItemsDashboard, ?>>
			attributeSetterBiConsumers =
				new LinkedHashMap
					<String, BiConsumer<CarouselItemsDashboard, ?>>();

		attributeGetterFunctions.put(
			"mvccVersion", CarouselItemsDashboard::getMvccVersion);
		attributeSetterBiConsumers.put(
			"mvccVersion",
			(BiConsumer<CarouselItemsDashboard, Long>)
				CarouselItemsDashboard::setMvccVersion);
		attributeGetterFunctions.put("uuid", CarouselItemsDashboard::getUuid);
		attributeSetterBiConsumers.put(
			"uuid",
			(BiConsumer<CarouselItemsDashboard, String>)
				CarouselItemsDashboard::setUuid);
		attributeGetterFunctions.put(
			"externalReferenceCode",
			CarouselItemsDashboard::getExternalReferenceCode);
		attributeSetterBiConsumers.put(
			"externalReferenceCode",
			(BiConsumer<CarouselItemsDashboard, String>)
				CarouselItemsDashboard::setExternalReferenceCode);
		attributeGetterFunctions.put(
			"streamingId", CarouselItemsDashboard::getStreamingId);
		attributeSetterBiConsumers.put(
			"streamingId",
			(BiConsumer<CarouselItemsDashboard, Long>)
				CarouselItemsDashboard::setStreamingId);
		attributeGetterFunctions.put(
			"groupId", CarouselItemsDashboard::getGroupId);
		attributeSetterBiConsumers.put(
			"groupId",
			(BiConsumer<CarouselItemsDashboard, Long>)
				CarouselItemsDashboard::setGroupId);
		attributeGetterFunctions.put(
			"companyId", CarouselItemsDashboard::getCompanyId);
		attributeSetterBiConsumers.put(
			"companyId",
			(BiConsumer<CarouselItemsDashboard, Long>)
				CarouselItemsDashboard::setCompanyId);
		attributeGetterFunctions.put(
			"userId", CarouselItemsDashboard::getUserId);
		attributeSetterBiConsumers.put(
			"userId",
			(BiConsumer<CarouselItemsDashboard, Long>)
				CarouselItemsDashboard::setUserId);
		attributeGetterFunctions.put(
			"userName", CarouselItemsDashboard::getUserName);
		attributeSetterBiConsumers.put(
			"userName",
			(BiConsumer<CarouselItemsDashboard, String>)
				CarouselItemsDashboard::setUserName);
		attributeGetterFunctions.put(
			"createDate", CarouselItemsDashboard::getCreateDate);
		attributeSetterBiConsumers.put(
			"createDate",
			(BiConsumer<CarouselItemsDashboard, Date>)
				CarouselItemsDashboard::setCreateDate);
		attributeGetterFunctions.put(
			"modifiedDate", CarouselItemsDashboard::getModifiedDate);
		attributeSetterBiConsumers.put(
			"modifiedDate",
			(BiConsumer<CarouselItemsDashboard, Date>)
				CarouselItemsDashboard::setModifiedDate);
		attributeGetterFunctions.put(
			"category", CarouselItemsDashboard::getCategory);
		attributeSetterBiConsumers.put(
			"category",
			(BiConsumer<CarouselItemsDashboard, String>)
				CarouselItemsDashboard::setCategory);
		attributeGetterFunctions.put(
			"colorTheme", CarouselItemsDashboard::getColorTheme);
		attributeSetterBiConsumers.put(
			"colorTheme",
			(BiConsumer<CarouselItemsDashboard, String>)
				CarouselItemsDashboard::setColorTheme);
		attributeGetterFunctions.put(
			"priority", CarouselItemsDashboard::getPriority);
		attributeSetterBiConsumers.put(
			"priority",
			(BiConsumer<CarouselItemsDashboard, String>)
				CarouselItemsDashboard::setPriority);
		attributeGetterFunctions.put("title", CarouselItemsDashboard::getTitle);
		attributeSetterBiConsumers.put(
			"title",
			(BiConsumer<CarouselItemsDashboard, String>)
				CarouselItemsDashboard::setTitle);
		attributeGetterFunctions.put("user", CarouselItemsDashboard::getUser);
		attributeSetterBiConsumers.put(
			"user",
			(BiConsumer<CarouselItemsDashboard, String>)
				CarouselItemsDashboard::setUser);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public long getMvccVersion() {
		return _mvccVersion;
	}

	@Override
	public void setMvccVersion(long mvccVersion) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_mvccVersion = mvccVersion;
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_uuid = uuid;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalUuid() {
		return getColumnOriginalValue("uuid_");
	}

	@JSON
	@Override
	public String getExternalReferenceCode() {
		if (_externalReferenceCode == null) {
			return "";
		}
		else {
			return _externalReferenceCode;
		}
	}

	@Override
	public void setExternalReferenceCode(String externalReferenceCode) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_externalReferenceCode = externalReferenceCode;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalExternalReferenceCode() {
		return getColumnOriginalValue("externalReferenceCode");
	}

	@JSON
	@Override
	public long getStreamingId() {
		return _streamingId;
	}

	@Override
	public void setStreamingId(long streamingId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_streamingId = streamingId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalStreamingId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("streamingId"));
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalGroupId() {
		return GetterUtil.getLong(this.<Long>getColumnOriginalValue("groupId"));
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalCompanyId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("companyId"));
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getCategory() {
		if (_category == null) {
			return "";
		}
		else {
			return _category;
		}
	}

	@Override
	public void setCategory(String category) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_category = category;
	}

	@JSON
	@Override
	public String getColorTheme() {
		if (_colorTheme == null) {
			return "";
		}
		else {
			return _colorTheme;
		}
	}

	@Override
	public void setColorTheme(String colorTheme) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_colorTheme = colorTheme;
	}

	@JSON
	@Override
	public String getPriority() {
		if (_priority == null) {
			return "";
		}
		else {
			return _priority;
		}
	}

	@Override
	public void setPriority(String priority) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_priority = priority;
	}

	@JSON
	@Override
	public String getTitle() {
		if (_title == null) {
			return "";
		}
		else {
			return _title;
		}
	}

	@Override
	public void setTitle(String title) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_title = title;
	}

	@JSON
	@Override
	public String getUser() {
		if (_user == null) {
			return "";
		}
		else {
			return _user;
		}
	}

	@Override
	public void setUser(String user) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_user = user;
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(
			PortalUtil.getClassNameId(CarouselItemsDashboard.class.getName()));
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), CarouselItemsDashboard.class.getName(),
			getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public CarouselItemsDashboard toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, CarouselItemsDashboard>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		CarouselItemsDashboardImpl carouselItemsDashboardImpl =
			new CarouselItemsDashboardImpl();

		carouselItemsDashboardImpl.setMvccVersion(getMvccVersion());
		carouselItemsDashboardImpl.setUuid(getUuid());
		carouselItemsDashboardImpl.setExternalReferenceCode(
			getExternalReferenceCode());
		carouselItemsDashboardImpl.setStreamingId(getStreamingId());
		carouselItemsDashboardImpl.setGroupId(getGroupId());
		carouselItemsDashboardImpl.setCompanyId(getCompanyId());
		carouselItemsDashboardImpl.setUserId(getUserId());
		carouselItemsDashboardImpl.setUserName(getUserName());
		carouselItemsDashboardImpl.setCreateDate(getCreateDate());
		carouselItemsDashboardImpl.setModifiedDate(getModifiedDate());
		carouselItemsDashboardImpl.setCategory(getCategory());
		carouselItemsDashboardImpl.setColorTheme(getColorTheme());
		carouselItemsDashboardImpl.setPriority(getPriority());
		carouselItemsDashboardImpl.setTitle(getTitle());
		carouselItemsDashboardImpl.setUser(getUser());

		carouselItemsDashboardImpl.resetOriginalValues();

		return carouselItemsDashboardImpl;
	}

	@Override
	public CarouselItemsDashboard cloneWithOriginalValues() {
		CarouselItemsDashboardImpl carouselItemsDashboardImpl =
			new CarouselItemsDashboardImpl();

		carouselItemsDashboardImpl.setMvccVersion(
			this.<Long>getColumnOriginalValue("mvccVersion"));
		carouselItemsDashboardImpl.setUuid(
			this.<String>getColumnOriginalValue("uuid_"));
		carouselItemsDashboardImpl.setExternalReferenceCode(
			this.<String>getColumnOriginalValue("externalReferenceCode"));
		carouselItemsDashboardImpl.setStreamingId(
			this.<Long>getColumnOriginalValue("streamingId"));
		carouselItemsDashboardImpl.setGroupId(
			this.<Long>getColumnOriginalValue("groupId"));
		carouselItemsDashboardImpl.setCompanyId(
			this.<Long>getColumnOriginalValue("companyId"));
		carouselItemsDashboardImpl.setUserId(
			this.<Long>getColumnOriginalValue("userId"));
		carouselItemsDashboardImpl.setUserName(
			this.<String>getColumnOriginalValue("userName"));
		carouselItemsDashboardImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));
		carouselItemsDashboardImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));
		carouselItemsDashboardImpl.setCategory(
			this.<String>getColumnOriginalValue("category"));
		carouselItemsDashboardImpl.setColorTheme(
			this.<String>getColumnOriginalValue("colorTheme"));
		carouselItemsDashboardImpl.setPriority(
			this.<String>getColumnOriginalValue("priority"));
		carouselItemsDashboardImpl.setTitle(
			this.<String>getColumnOriginalValue("title"));
		carouselItemsDashboardImpl.setUser(
			this.<String>getColumnOriginalValue("user"));

		return carouselItemsDashboardImpl;
	}

	@Override
	public int compareTo(CarouselItemsDashboard carouselItemsDashboard) {
		int value = 0;

		value = getTitle().compareTo(carouselItemsDashboard.getTitle());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof CarouselItemsDashboard)) {
			return false;
		}

		CarouselItemsDashboard carouselItemsDashboard =
			(CarouselItemsDashboard)object;

		long primaryKey = carouselItemsDashboard.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<CarouselItemsDashboard> toCacheModel() {
		CarouselItemsDashboardCacheModel carouselItemsDashboardCacheModel =
			new CarouselItemsDashboardCacheModel();

		carouselItemsDashboardCacheModel.mvccVersion = getMvccVersion();

		carouselItemsDashboardCacheModel.uuid = getUuid();

		String uuid = carouselItemsDashboardCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			carouselItemsDashboardCacheModel.uuid = null;
		}

		carouselItemsDashboardCacheModel.externalReferenceCode =
			getExternalReferenceCode();

		String externalReferenceCode =
			carouselItemsDashboardCacheModel.externalReferenceCode;

		if ((externalReferenceCode != null) &&
			(externalReferenceCode.length() == 0)) {

			carouselItemsDashboardCacheModel.externalReferenceCode = null;
		}

		carouselItemsDashboardCacheModel.streamingId = getStreamingId();

		carouselItemsDashboardCacheModel.groupId = getGroupId();

		carouselItemsDashboardCacheModel.companyId = getCompanyId();

		carouselItemsDashboardCacheModel.userId = getUserId();

		carouselItemsDashboardCacheModel.userName = getUserName();

		String userName = carouselItemsDashboardCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			carouselItemsDashboardCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			carouselItemsDashboardCacheModel.createDate = createDate.getTime();
		}
		else {
			carouselItemsDashboardCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			carouselItemsDashboardCacheModel.modifiedDate =
				modifiedDate.getTime();
		}
		else {
			carouselItemsDashboardCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		carouselItemsDashboardCacheModel.category = getCategory();

		String category = carouselItemsDashboardCacheModel.category;

		if ((category != null) && (category.length() == 0)) {
			carouselItemsDashboardCacheModel.category = null;
		}

		carouselItemsDashboardCacheModel.colorTheme = getColorTheme();

		String colorTheme = carouselItemsDashboardCacheModel.colorTheme;

		if ((colorTheme != null) && (colorTheme.length() == 0)) {
			carouselItemsDashboardCacheModel.colorTheme = null;
		}

		carouselItemsDashboardCacheModel.priority = getPriority();

		String priority = carouselItemsDashboardCacheModel.priority;

		if ((priority != null) && (priority.length() == 0)) {
			carouselItemsDashboardCacheModel.priority = null;
		}

		carouselItemsDashboardCacheModel.title = getTitle();

		String title = carouselItemsDashboardCacheModel.title;

		if ((title != null) && (title.length() == 0)) {
			carouselItemsDashboardCacheModel.title = null;
		}

		carouselItemsDashboardCacheModel.user = getUser();

		String user = carouselItemsDashboardCacheModel.user;

		if ((user != null) && (user.length() == 0)) {
			carouselItemsDashboardCacheModel.user = null;
		}

		return carouselItemsDashboardCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<CarouselItemsDashboard, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<CarouselItemsDashboard, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<CarouselItemsDashboard, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply(
				(CarouselItemsDashboard)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a carousel items dashboard model instance should use the <code>CarouselItemsDashboard</code> interface instead.
	 */
	public abstract void persist();

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, CarouselItemsDashboard>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					CarouselItemsDashboard.class, ModelWrapper.class);

	}

	private long _mvccVersion;
	private String _uuid;
	private String _externalReferenceCode;
	private long _streamingId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _category;
	private String _colorTheme;
	private String _priority;
	private String _title;
	private String _user;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<CarouselItemsDashboard, Object> function =
			_attributeGetterFunctions.get(columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((CarouselItemsDashboard)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("mvccVersion", _mvccVersion);
		_columnOriginalValues.put("uuid_", _uuid);
		_columnOriginalValues.put(
			"externalReferenceCode", _externalReferenceCode);
		_columnOriginalValues.put("streamingId", _streamingId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put("category", _category);
		_columnOriginalValues.put("colorTheme", _colorTheme);
		_columnOriginalValues.put("priority", _priority);
		_columnOriginalValues.put("title", _title);
		_columnOriginalValues.put("user", _user);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("uuid_", "uuid");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("mvccVersion", 1L);

		columnBitmasks.put("uuid_", 2L);

		columnBitmasks.put("externalReferenceCode", 4L);

		columnBitmasks.put("streamingId", 8L);

		columnBitmasks.put("groupId", 16L);

		columnBitmasks.put("companyId", 32L);

		columnBitmasks.put("userId", 64L);

		columnBitmasks.put("userName", 128L);

		columnBitmasks.put("createDate", 256L);

		columnBitmasks.put("modifiedDate", 512L);

		columnBitmasks.put("category", 1024L);

		columnBitmasks.put("colorTheme", 2048L);

		columnBitmasks.put("priority", 4096L);

		columnBitmasks.put("title", 8192L);

		columnBitmasks.put("user", 16384L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private CarouselItemsDashboard _escapedModel;

}